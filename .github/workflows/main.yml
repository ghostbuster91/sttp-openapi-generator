name: CI

on:
  push:
    branches: [ "**" ]
    tags: [ v* ]
  pull_request:
    branches: [ "**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-sbt:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: coursier/cache-action@v6
      - uses: olafurpg/setup-scala@v13
        with:
          java-version: adopt@1.11
      - name: Run tests with sbt
        run: sbt test
      - name: Run sbt-plugin tests
        run: sbt scripted

  build-mill:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: coursier/cache-action@v6
      - uses: olafurpg/setup-scala@v13
        with:
          java-version: adopt@1.11
      - name: Run tests with mill
        run: ./millw _.test

  generate-lsif:
    runs-on: ubuntu-20.04
    needs: [ build-sbt, build-mill ]
    steps:
      - uses: actions/checkout@v3
      - uses: coursier/cache-action@v6
      - uses: olafurpg/setup-scala@v13
        with:
          java-version: adopt@1.11
      - name: Generate LSIF
        run: curl -fLo coursier https://git.io/coursier-cli && chmod +x coursier && ./coursier launch com.sourcegraph:lsif-java_2.13:0.7.3 -- index
      - name: Upload LSIF data
        uses: sourcegraph/lsif-upload-action@master
        with:
          endpoint: https://sourcegraph.com
          github_token: ${{ secrets.GITHUB_TOKEN }}
          file: dump.lsif

  publish:
    name: Publish release
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v'))
    needs: [ build-sbt, build-mill ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: olafurpg/setup-scala@v13
      - run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      - name: Extract version from commit message
        run: |
          version=${GITHUB_REF/refs\/tags\/v/}
          echo "VERSION=$version" >> $GITHUB_ENV
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
      - name: Publish release notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: true
          name: "v${{ env.VERSION }}"
          tag: "v${{ env.VERSION }}"
          version: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract version from commit message
        run: |
          version=${GITHUB_REF/refs\/tags\/v/}
          echo "VERSION=$version" >> $GITHUB_ENV
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
      - name: Publish release notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: true
          name: "v${{ env.VERSION }}"
          tag: "v${{ env.VERSION }}"
          version: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}