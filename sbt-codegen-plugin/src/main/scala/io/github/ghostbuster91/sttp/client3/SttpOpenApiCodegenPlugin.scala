package io.github.ghostbuster91.sttp.client3

import sbt.{AutoPlugin, Def, File}
import sbt.Keys._
import sbt._
import org.scalafmt.interfaces.Scalafmt

object SttpOpenApiCodegenPlugin extends AutoPlugin {

  val sttpOpenApiOutputPath =
    settingKey[File](
      "Directory for sources generated by sttp-openapi generator"
    )
  val sttpOpenApiInputPath =
    settingKey[File]("Input resources for sttp-openapi generator")

  val sttpOpenApiJsonLibrary =
    settingKey[JsonLibrary]("Json library for sttp-openapi generator to use")

  object autoImport {

    lazy val generateSources =
      Def.task {
        val log = streams.value.log
        val targetDirectory = sttpOpenApiOutputPath.value
        val topLevelInputPath = sttpOpenApiInputPath.value
        val scalafmt = Scalafmt.create(this.getClass.getClassLoader)
        val config = CodegenConfig(
          handleErrors = false,
          sttpOpenApiJsonLibrary.value
        )
        val codegen = new SbtCodegenAdapter(
          config,
          targetDirectory,
          topLevelInputPath,
          log,
          scalafmt
        )

        val scalaVer = scalaVersion.value
        val inputFiles = collectInputFiles(topLevelInputPath).toSet
        val cachedFun = FileFunction.cached(
          streams.value.cacheDirectory / s"sttp-openapi-src-$scalaVer",
          FileInfo.hash
        ) { input: Set[File] =>
          input.foldLeft(Set.empty[File]) { (result, inputFile) =>
            result + codegen.processSingleFile(inputFile)
          }
        }
        cachedFun(inputFiles).toSeq
      }

    private def collectInputFiles(f: File): List[File] = {
      val these = f.listFiles
      these
        .filter(_.isFile)
        .toList ++ these.filter(_.isDirectory).flatMap(collectInputFiles)
    }
  }

  import autoImport._

  private lazy val coreDeps = List(
    "com.softwaremill.sttp.client3" %% "core" % "3.2.3"
  )

  private lazy val circeDeps = List(
    "io.circe" %% "circe-core" % "0.13.0",
    "io.circe" %% "circe-generic" % "0.13.0",
    "io.circe" %% "circe-parser" % "0.13.0",
    "com.softwaremill.sttp.client3" %% "circe" % "3.2.3"
  )

  override def projectSettings: Seq[Def.Setting[_]] =
    Seq(
      sttpOpenApiOutputPath := (Compile / sourceManaged).value,
      sttpOpenApiInputPath := (Compile / resourceDirectory).value,
      sttpOpenApiJsonLibrary := JsonLibrary.Circe,
      Compile / sourceGenerators += generateSources.taskValue,
      libraryDependencies ++= coreDeps ++ (sttpOpenApiJsonLibrary.value match {
        case JsonLibrary.Circe => circeDeps
      })
    )
}
